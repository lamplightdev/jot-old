(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var version = "95";

importScripts('/js/serviceworker-cache-polyfill.js');

var cacheNameStatic = 'jot-static-v' + version;
var cacheNameGoogleAvatar = 'jot-google-avatar-v' + version;

var currentCacheNames = [cacheNameStatic, cacheNameGoogleAvatar];

self.addEventListener('install', function (event) {
  event.waitUntil(caches.open(cacheNameStatic).then(function (cache) {
    return cache.addAll(['/', '/css/app.css', '/js/dist/app.js', '/js/dist/app.min.js', '/js/browser-polyfill.js', '/js/pouchdb.js']);
  }));
});

// '/js/webfontloader.js',
self.addEventListener('activate', function (event) {
  event.waitUntil(caches.keys().then(function (cacheNames) {
    return Promise.all(cacheNames.map(function (cacheName) {
      if (currentCacheNames.indexOf(cacheName) === -1) {
        return caches.delete(cacheName);
      }
    }));
  }).then(function (promises) {
    // localStorage.setItem('sw-version', version);
    return promises;
  }));
});

self.addEventListener('fetch', function (event) {
  var selfURL = self.location;
  var requestURL = new URL(event.request.url);

  if (requestURL.pathname.indexOf('/auth/') === 0 && requestURL.pathname !== '/auth/user') {
    return;
  }

  // if no extension, assume it's a page (not root)
  if (selfURL.host === requestURL.host && requestURL.pathname.indexOf('.') === -1 && requestURL.pathname !== '/auth/user') {
    event.respondWith(caches.match('/').then(function (cacheResponse) {
      return cacheResponse;
    }, function (err) {
      console.log('sw match error: ', err);
    }));
  } else {
    event.respondWith(caches.match(event.request).then(function (response) {
      if (response) {
        return response;
      }

      var fetchRequest = event.request.clone();

      return fetch(fetchRequest).then(function (fetchResponse) {
        var shouldCache = false;

        if (fetchResponse.type === 'basic' && fetchResponse.status === 200) {
          // shouldCache = cacheNameStatic;
        } else if (fetchResponse.type === 'opaque') {
            // if response isn't from our origin / doesn't support CORS
            if (requestURL.hostname.indexOf('.googleusercontent.com') > -1) {
              shouldCache = cacheNameGoogleAvatar;
            } else {
              // just let response pass through, don't cache
            }
          }

        if (shouldCache) {
          (function () {
            var responseToCache = fetchResponse.clone();

            caches.open(shouldCache).then(function (cache) {
              var cacheRequest = event.request.clone();
              cache.put(cacheRequest, responseToCache);
            });
          })();
        }

        return fetchResponse;
      }, function (err) {
        console.log('sw fetch error: ', err);
        if (requestURL.pathname === '/auth/user') {
          return new Response(JSON.stringify({
            serviceworker: true
          }, {
            headers: { 'Content-Type': 'application/json' }
          }));
        }

        if (requestURL.origin === location.origin) {
          return caches.match('/');
        }
      });
    }));
  }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
